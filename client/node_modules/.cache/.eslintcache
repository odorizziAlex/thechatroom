[{"/Users/odorizzialex/Desktop/Projects/coding/web/Chat_Room_Projects/chatroom4/src/index.js":"1","/Users/odorizzialex/Desktop/Projects/coding/web/Chat_Room_Projects/chatroom4/src/App.js":"2","/Users/odorizzialex/Desktop/Projects/coding/web/Chat_Room_Projects/chatroom4/src/reportWebVitals.js":"3","/Users/odorizzialex/Desktop/Projects/coding/web/Chat_Room_Projects/chatroom4/src/components/Chat/MainChat.jsx":"4","/Users/odorizzialex/Desktop/Projects/coding/web/Chat_Room_Projects/chatroom4/src/components/Chat/SingleMessage.jsx":"5","/Users/odorizzialex/Desktop/Projects/coding/web/Chat_Room_Projects/thechatroom/src/index.js":"6","/Users/odorizzialex/Desktop/Projects/coding/web/Chat_Room_Projects/thechatroom/src/reportWebVitals.js":"7","/Users/odorizzialex/Desktop/Projects/coding/web/Chat_Room_Projects/thechatroom/src/App.js":"8","/Users/odorizzialex/Desktop/Projects/coding/web/Chat_Room_Projects/thechatroom/src/components/Chat/MainChat.jsx":"9","/Users/odorizzialex/Desktop/Projects/coding/web/Chat_Room_Projects/thechatroom/src/components/Chat/SingleMessage.jsx":"10"},{"size":500,"mtime":1629215552767,"results":"11","hashOfConfig":"12"},{"size":153,"mtime":1629216600605,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1629215552768,"results":"14","hashOfConfig":"12"},{"size":6393,"mtime":1630255455994,"results":"15","hashOfConfig":"12"},{"size":1294,"mtime":1630253016529,"results":"16","hashOfConfig":"12"},{"size":500,"mtime":1629215552767,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1629215552768,"results":"19","hashOfConfig":"18"},{"size":153,"mtime":1629216600605,"results":"20","hashOfConfig":"18"},{"size":12424,"mtime":1630494622203,"results":"21","hashOfConfig":"18"},{"size":2402,"mtime":1630489849812,"results":"22","hashOfConfig":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"9m4tro",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1a178f5",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/odorizzialex/Desktop/Projects/coding/web/Chat_Room_Projects/chatroom4/src/index.js",[],["46","47"],"/Users/odorizzialex/Desktop/Projects/coding/web/Chat_Room_Projects/chatroom4/src/App.js",[],"/Users/odorizzialex/Desktop/Projects/coding/web/Chat_Room_Projects/chatroom4/src/reportWebVitals.js",[],"/Users/odorizzialex/Desktop/Projects/coding/web/Chat_Room_Projects/chatroom4/src/components/Chat/MainChat.jsx",["48"],"/Users/odorizzialex/Desktop/Projects/coding/web/Chat_Room_Projects/chatroom4/src/components/Chat/SingleMessage.jsx",[],"/Users/odorizzialex/Desktop/Projects/coding/web/Chat_Room_Projects/thechatroom/src/index.js",[],["49","50"],"/Users/odorizzialex/Desktop/Projects/coding/web/Chat_Room_Projects/thechatroom/src/reportWebVitals.js",[],"/Users/odorizzialex/Desktop/Projects/coding/web/Chat_Room_Projects/thechatroom/src/App.js",[],"/Users/odorizzialex/Desktop/Projects/coding/web/Chat_Room_Projects/thechatroom/src/components/Chat/MainChat.jsx",["51","52"],"import React, { useState, useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport sendIconGrey from '../../assets/send_light-grey.svg'\nimport saveIconGrey from '../../assets/save_light-grey.svg'\nimport downIconGrey from '../../assets/chevron-down_light-grey.svg'\nimport infoIconLightPetrol from '../../assets/info_light-petrol.svg'\nimport SingleMessage from './SingleMessage'\nimport io from 'socket.io-client'\n\n/**\n * TODO\n * stack messages from bottom up !discarted!\n * make message input box multiline !check!\n *\n * username input maximum letters, !!no space!! linebreak when too narrow!! !check!\n * hide own username !check!\n * add timestamps !check!\n * user created/ connected alert !check!\n * user left chat alert \n *  // refactor setTimeout! when message changes multiple times during 3500ms\n    // it wont stay for additional 3500 ms\n    also figure out how to show username that loggs off.\n * \n * present user list\n * save history and save users + pw\n */\n\nconst MainChat = () => {\n    const [state, setState] = useState({ name: \"\", message: \"\", timestamp: \"\" });\n    const [headerName, setHeaderName] = useState(\"\");\n    const [chat, setChat] = useState([]);\n\n    const [isUserNamePopupVisible, setIsUsernamePopupVisible] = useState(true);\n    const [userHasScrolled, setUserHasScrolled] = useState(false);\n    const [isNewMessageReceived, setIsNewMessageReceived] = useState(false);\n    const [showAlert, setShowAlert] = useState(false);\n    const [alertMessage, setAlertMessage] = useState(\"\");\n\n    const socketRef = useRef();\n    const messageListRef = useRef();\n\n\n    useEffect(() => {\n        socketRef.current = io.connect(\"http://localhost:5000\")\n        socketRef.current.on('message', ({ name, message, timestamp }) => {\n            setChat([...chat, { name, message, timestamp }])\n            scrollHandler();\n        });\n\n        socketRef.current.on('userConnected', (name) => {\n            setAlertMessage([<strong>{name}</strong>,' ',<strong style={{color: \"var(--success)\"}}>joined</strong>,' the chat!']);\n            setShowAlert(true);\n            setTimeout(() => {\n                setShowAlert(false);\n                setAlertMessage(\"\");\n            },3500);\n        });\n        \n        socketRef.current.on('userDisconnected', (name) => {\n            setAlertMessage([<strong>{name}</strong>,' ',<strong style={{color: \"var(--warning)\"}}>left</strong>,' the chat!']);\n            setShowAlert(true);\n            setTimeout(() => {\n                setShowAlert(false);\n                setAlertMessage(\"\");\n            },3500);\n        })\n\n        return () => {\n            socketRef.current.disconnect();\n        }\n    },[chat])\n\n    useEffect(() => {\n        let msgListRef = messageListRef.current;\n        msgListRef.addEventListener(\"scroll\", checkScrollDistance);\n        window.addEventListener('unload', notifyOnUnload)\n\n        return () => {\n            msgListRef.removeEventListener(\"scroll\", checkScrollDistance);\n            window.removeEventListener('unload', notifyOnUnload)\n        }\n    }, [userHasScrolled, isNewMessageReceived])\n\n    const notifyOnUnload = (e) => {\n        socketRef.current.emit(\"userDisconnected\", state.name);\n    }\n\n    const scrollHandler = () => {\n        if (!userHasScrolled) {\n            scrollToNewestMessage();\n        } else if (userHasScrolled) {\n            setIsNewMessageReceived(true);\n        }\n    }\n\n    const scrollToNewestMessage = () => {\n        if (isNewMessageReceived) setIsNewMessageReceived(false);\n        messageListRef.current.scrollTop = messageListRef.current.scrollHeight;\n    }\n\n    const checkScrollDistance = () => {\n        /**\n         * .scrollHeight is the overall height of the div, that can be accessed by scrolling\n         * .offsetHeight is the height of the displayed portion of a scrollable div\n         * .scrollTop gets or sets the number of pixels that an element's content is scrolled vertically\n         */\n        let scrollDistance = messageListRef.current.scrollHeight - (messageListRef.current.scrollTop + messageListRef.current.offsetHeight);\n        let messageListElHeight = messageListRef.current.offsetHeight;\n        if (scrollDistance > (messageListElHeight / 4))\n            setUserHasScrolled(true)\n        else {\n            setUserHasScrolled(false);\n            setIsNewMessageReceived(false);\n        }\n    }\n\n    const onUsernameSubmit = (event) => {\n        event.preventDefault();\n        const name = event.target.name.value;\n        if (state.name !== \"\") {\n            socketRef.current.emit('userConnected', name);\n            setState({ ...state, [event.target.name]: event.target.value });\n            setIsUsernamePopupVisible(false);\n            setHeaderName(state.name);\n        }\n    }\n\n    const onMessageSubmit = (event) => {\n        const { name, message, timestamp } = state;\n        event.preventDefault();\n        if (state.message !== \"\") {\n            socketRef.current.emit('message', { name, message, timestamp });\n            setState({ message: \"\", name, timestamp: \"\" });\n            scrollToNewestMessage();\n        }\n    }\n\n    const onTextInputChange = (event) => {\n        if (event.target.name === \"name\") {\n            let username = event.target.value;\n            username = username.replace(/\\s/g, '');\n            setState({ ...state, [event.target.name]: username });\n        } else {\n            setState({ ...state, [event.target.name]: event.target.value, timestamp: new Date().toLocaleString() });\n        }\n    }\n\n    /**\n     * This handler is required to use enter as a submit option while using a\n     *  textarea instead of a standard input in a form.\n     */\n    const onEnterPress = (event) => {\n        if (event.key === 'Enter' && !event.shiftKey) {\n            onMessageSubmit(event);\n        }\n    }\n\n    return (\n        <StyledArea>\n            {isUserNamePopupVisible && <Overlay>\n                <Popup>\n                    <PopupDescription>\n                        Insert your Username!\n                    </PopupDescription>\n                    <InputForm onSubmit={onUsernameSubmit}>\n                        <StyledInput\n                            name=\"name\"\n                            onChange={onTextInputChange}\n                            value={state.name}\n                            placeholder=\"Username...\"\n                            autoComplete=\"off\"\n                            maxLength=\"25\"\n                        />\n                        <StyledFormSubmitButton text={state.name}>\n                            <img src={saveIconGrey} alt=\"save icon from feathericons.com\" />\n                        </StyledFormSubmitButton>\n                    </InputForm>\n                </Popup>\n            </Overlay>}\n            <ChatArea>\n                <HeaderWrapper>\n                    <Header>\n                        {headerName}\n                    </Header>\n                    {showAlert && <StyledAlert>\n                        <AlertIcon src={infoIconLightPetrol} alt=\"info icon from feathericons.com\" />\n                        <AlertMessage>{alertMessage}</AlertMessage>\n                    </StyledAlert>}\n                </HeaderWrapper>\n                <MessagesOutterWrapper ref={messageListRef}>\n                    <Messages>\n                        {chat.map(({ name, message, timestamp }, index) => {\n                            return (\n                                <SingleMessage\n                                    key={index}\n                                    currentUsername={state.name}\n                                    name={name}\n                                    message={message}\n                                    timestamp={timestamp}\n                                />\n                            );\n                        })}\n                    </Messages>\n                </MessagesOutterWrapper>\n                <BottomAreaWrapper>\n                    \n                    <ScrollButtonWrapper>\n                        {isNewMessageReceived && userHasScrolled &&\n                            <NewMessageIndicator />}\n                        {userHasScrolled &&\n                            <StyledScrollButton onClick={() => scrollToNewestMessage()}>\n                                <img src={downIconGrey} alt=\"chevron down from feathericons.com\" />\n                            </StyledScrollButton>}\n                    </ScrollButtonWrapper>\n                    <InputForm\n                        onSubmit={onMessageSubmit}\n                    >\n                        <StyledTextArea\n                            name=\"message\"\n                            onChange={onTextInputChange}\n                            value={state.message}\n                            placeholder=\"Message...\"\n                            autoComplete=\"off\"\n                            onKeyDown={onEnterPress}\n                        />\n                        <StyledFormSubmitButton text={state.message}>\n                            <img src={sendIconGrey} alt=\"send icon from feathericons.com\" />\n                        </StyledFormSubmitButton>\n                    </InputForm>\n                </BottomAreaWrapper>\n            </ChatArea>\n        </StyledArea>\n    );\n}\n\nexport default MainChat;\n\nconst StyledArea = styled.div`\nposition: fixed;\npadding: 20px;\nbackground: var(--app-background);\nheight: 100%;\nwidth:100%;\n`;\n\nconst Overlay = styled.div`\nbackground: var(--trans-black);\nposition: fixed;\nwidth: 100%;\nheight: 100%;\nbackdrop-filter: blur(5px);\ntop: 0;\nleft: 0;\nright: 0;\nbottom: 0;\nz-index: 2;\n`\n\nconst Popup = styled.div`\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\nbackground: var(--white);\nborder-radius: 10px;\n`\n\nconst PopupDescription = styled.div`\ntext-align:center;\npadding-top: 10px;\npadding-bottom: 10px;\n\n`\nconst ChatArea = styled.div`\nposition: absolute;\ntop:50%;\nleft:50%;\ntransform: translate(-50%, -50%);\ndisplay: flex;\nflex-direction: column;\nbackground: var(--white);\nborder-radius: 10px;\nwidth: 99%;\nheight: 98%;\n`;\n\nconst HeaderWrapper = styled.div`\npadding: 10px;\nborder-bottom: 1px solid var(--light-grey);\n`\n\nconst Header = styled.div`\nwidth: 100%;\nbackground: var(--light-grey);\nborder-radius: 10px;\npadding: 15px;\ncolor: var(--petrol);\nfont-weight: 700;\ntext-align: right;\n`\n\nconst MessagesOutterWrapper = styled.div`\noverflow-y: auto;\npadding: 10px 10px 0px 10px;\nheight: 100%;\nwidth: 100%;\n`\n\nconst Messages = styled.div`\n`\n\nconst BottomAreaWrapper = styled.div`\n`\n\nconst StyledAlert = styled.div`\nposition: absolute;\ndisplay: flex;\njustify-content: center;\nwidth: 50%;\nmargin-left: 25%;\nmargin-top: 20px;\npadding: 3px;\ntext-align: center;\n// display: none;\ncolor: var(--light-petrol);\nbackground: var(--light-grey);\nfont-size: var(--p-size);\nborder-radius: 15px;\n`\n\nconst AlertIcon = styled.img`\nwidth: 20px;\n`\n\nconst AlertMessage = styled.div`\nmargin-left: 10px;\nmargin-top: 1.5px;\n`\n\nconst ScrollButtonWrapper = styled.div`\nposition: absolute;\nmargin-left: 10px;\nmargin-top: -40px;\n`\n\nconst NewMessageIndicator = styled.div`\nposition: absolute;\npointer-events: none;\nwidth: 13px;\nheight: 13px;\nmargin-left: 22px;\nmargin-top: -3px;\nborder-radius: 6px;\nbackground: var(--warning);\n`\n\nconst StyledScrollButton = styled.div`\ndisplay: inline-block;\nborder: 0;\npadding: 4px 4px 0px 4px;\nbackground: var(--light-petrol);\nborder-radius: 10px;\ncursor: pointer;\n\n&:hover {\n    background: var(--petrol);\n}\n`\n\nconst InputForm = styled.form`\ndisplay: flex;\nwidth: 100%;\npadding: 10px;\nmargin-top: auto;\nborder-top: 1px solid var(--light-grey);\n`\n\nconst StyledTextArea = styled.textarea`\nborder-radius: 10px;\noverflow-y: auto;\nborder: 0;\nbackground: var(--light-grey);\npadding: 20px;\nwidth: 100%;\nmax-height: 55px;\nfont: 13px Arial;\nresize: none;\n\n&:focus {\n    outline: none;\n}\n`\n\nconst StyledInput = styled.input`\nborder-radius: 10px;\nborder: 0;\nbackground: var(--light-grey);\npadding: 20px;\nwidth: 100%;\n\n&:focus {\n    outline: none;\n}\n`\n\nconst StyledFormSubmitButton = styled.button`\nborder: 0;\npadding: 4px 16px 0px 15px;\nmargin-left: 5px;\nbackground: ${(props) => props.text !== \"\" ? \"var(--light-petrol)\" : \"var(--dark-grey)\"};\nborder-radius: 10px;\ncursor: pointer;\ncursor: ${(props) => props.text !== \"\" ? \"pointer\" : \"default\"};\npointer-events: ${(props) => props.text !== \"\" ? \"\" : \"none\"};   \n\n&:hover {\n    background: ${(props) => props.text !== \"\" ? \"var(--petrol)\" : \"\"};\n}\n`\n","/Users/odorizzialex/Desktop/Projects/coding/web/Chat_Room_Projects/thechatroom/src/components/Chat/SingleMessage.jsx",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":37,"column":5,"nodeType":"59","endLine":37,"endColumn":13,"suggestions":"60"},{"ruleId":"53","replacedBy":"61"},{"ruleId":"55","replacedBy":"62"},{"ruleId":"57","severity":1,"message":"63","line":71,"column":7,"nodeType":"59","endLine":71,"endColumn":13,"suggestions":"64"},{"ruleId":"57","severity":1,"message":"65","line":82,"column":8,"nodeType":"59","endLine":82,"endColumn":47,"suggestions":"66"},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array.","ArrayExpression",["69"],["67"],["68"],"React Hook useEffect has a missing dependency: 'scrollHandler'. Either include it or remove the dependency array.",["70"],"React Hook useEffect has a missing dependency: 'notifyOnUnload'. Either include it or remove the dependency array.",["71"],"no-global-assign","no-unsafe-negation",{"desc":"72","fix":"73"},{"desc":"74","fix":"75"},{"desc":"76","fix":"77"},"Update the dependencies array to be: [chat, state]",{"range":"78","text":"79"},"Update the dependencies array to be: [chat, scrollHandler]",{"range":"80","text":"81"},"Update the dependencies array to be: [userHasScrolled, isNewMessageReceived, notifyOnUnload]",{"range":"82","text":"83"},[1274,1282],"[chat, state]",[2676,2682],"[chat, scrollHandler]",[3063,3102],"[userHasScrolled, isNewMessageReceived, notifyOnUnload]"]